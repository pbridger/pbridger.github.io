<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on paulbridger.com</title><link>https://paulbridger.com/posts/</link><description>Recent content in Posts on paulbridger.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Jun 2021 00:02:03 +0200</lastBuildDate><atom:link href="https://paulbridger.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Solving Machine Learning Performance Anti-Patterns: a Systematic Approach</title><link>https://paulbridger.com/posts/nsight-systems-systematic-optimization/</link><pubDate>Thu, 24 Jun 2021 00:02:03 +0200</pubDate><guid>https://paulbridger.com/posts/nsight-systems-systematic-optimization/</guid><description>This article is a high-level introduction to an efficient worfklow for optimizing runtime performance of machine learning systems running on the GPU. Using traces from Nsight Systems to show real production scenarios, I introduce a set of common utilization patterns and outline effective approaches to improve performance.</description></item><item><title>A Simple and Flexible Pytorch Video Pipeline</title><link>https://paulbridger.com/posts/video-analytics-pytorch-pipeline/</link><pubDate>Wed, 23 Sep 2020 18:21:00 +0200</pubDate><guid>https://paulbridger.com/posts/video-analytics-pytorch-pipeline/</guid><description>Taking machine learning models into production for video analytics doesn&amp;rsquo;t have to be hard. A pipeline with reasonable efficiency can be created very quickly just by plugging together the right libraries. In this post we&amp;rsquo;ll create a video pipeline with a focus on flexibility and simplicity using two main libraries: &lt;a href="https://gstreamer.freedesktop.org/">Gstreamer&lt;/a> and &lt;a href="https://pytorch.org">Pytorch&lt;/a>.</description></item><item><title>Object Detection from 9 FPS to 650 FPS in 6 Steps</title><link>https://paulbridger.com/posts/video-analytics-pipeline-tuning/</link><pubDate>Wed, 30 Sep 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/video-analytics-pipeline-tuning/</guid><description>Making code run fast on GPUs requires a very different approach to making code run fast on CPUs because the hardware architecture is fundamentally different. Machine learning engineers of all kinds should care about squeezing performance from their models and hardware — not just for production purposes, but also for research and training. In research as in development, a fast iteration loop leads to faster improvement. This article is a practical deep dive into making a specific deep learning model (&lt;a href="https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/">Nvidia&amp;rsquo;s SSD300&lt;/a>) run fast on a powerful GPU server, but the general principles apply to all GPU programming.</description></item><item><title>Object Detection at 1840 FPS with TorchScript, TensorRT and DeepStream</title><link>https://paulbridger.com/posts/video-analytics-deepstream-pipeline/</link><pubDate>Sat, 17 Oct 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/video-analytics-deepstream-pipeline/</guid><description>In this article we take performance of the SSD300 model even further, leaving Python behind and moving towards true production deployment technologies: TorchScript, TensorRT and DeepStream. We also identify and understand several limitations in Nvidia&amp;rsquo;s DeepStream framework, and then remove them by modifying how the &lt;code>nvinfer&lt;/code> element works.</description></item><item><title>Object Detection at 2530 FPS with TensorRT and 8-Bit Quantization</title><link>https://paulbridger.com/posts/tensorrt-object-detection-quantized/</link><pubDate>Thu, 31 Dec 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/tensorrt-object-detection-quantized/</guid><description>This article is a deep dive into the techniques needed to get SSD300 object detection throughput to 2530 FPS. We will rewrite Pytorch model code, perform &lt;a href="https://github.com/NVIDIA/TensorRT/tree/master/tools/onnx-graphsurgeon">ONNX graph surgery&lt;/a>, optimize &lt;a href="https://github.com/NVIDIA/TensorRT/tree/master/plugin/batchedNMSPlugin">a TensorRT plugin&lt;/a> and finally we&amp;rsquo;ll quantize the model to an 8-bit representation. We will also examine divergence from the accuracy of the full-precision model.</description></item><item><title>Mastering TorchScript: Tracing vs Scripting, Device Pinning, Direct Graph Modification</title><link>https://paulbridger.com/posts/mastering-torchscript/</link><pubDate>Thu, 29 Oct 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/mastering-torchscript/</guid><description>TorchScript is one of the most important parts of the Pytorch ecosystem, allowing portable, efficient and nearly seamless deployment. With just a few lines of &lt;code>torch.jit&lt;/code> code and some simple model changes you can export an asset that runs anywhere &lt;code>libtorch&lt;/code> does. It&amp;rsquo;s an important toolset to master if you want to run your models outside the lab at high efficiency. This article is a collection of topics going beyond the basics of your first export.</description></item><item><title>Consulting / Hire Me</title><link>https://paulbridger.com/posts/consulting/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://paulbridger.com/posts/consulting/</guid><description>To get a sense of the diverse areas I can help with, check my about me page, my resume, and of course the articles on paulbridger.com. I am generally available for short and medium term consulting engagements.
Typical projects and tasks include:
Multi-model analytics pipeline development, for example with Gstreamer and DeepStream Proprietary model optimization or productionization Deep-learning model implementation, optimization and productionization in Pytorch Spatial intelligence algorithms — whole-system calibration, 3D math, etc.</description></item><item><title>About Paul Bridger</title><link>https://paulbridger.com/posts/about/</link><pubDate>Wed, 23 Sep 2020 01:14:00 +0200</pubDate><guid>https://paulbridger.com/posts/about/</guid><description>Hi. I&amp;rsquo;m Paul, and I like to write code, build products and start companies.
I started out in New Zealand, and I&amp;rsquo;ve been lucky enough to work with some very special people in many places around the world. I&amp;rsquo;ve often played a technical co-founder role, leading and growing engineering teams, and taking complex products from conception to production.
Over the last couple of decades I&amp;rsquo;ve built products in a wide range of industries, from publishing, 3D game development, investment banking, to iOS, big data and machine learning.</description></item></channel></rss>