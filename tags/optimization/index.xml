<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Optimization on paulbridger.com</title><link>https://paulbridger.com/tags/optimization/</link><description>Recent content in Optimization on paulbridger.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Jun 2021 00:02:03 +0200</lastBuildDate><atom:link href="https://paulbridger.com/tags/optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>Systematic Machine Learning Optimization: a Pattern Language</title><link>https://paulbridger.com/posts/nsight-systems-systematic-optimization/</link><pubDate>Thu, 24 Jun 2021 00:02:03 +0200</pubDate><guid>https://paulbridger.com/posts/nsight-systems-systematic-optimization/</guid><description>This article is a high-level introduction to an efficient worfklow for optimizing runtime performance of machine learning systems running on the GPU. Using traces from Nsight Systems to show real production scenarios, I introduce a set of common utilization patterns and outline effective approaches to improve performance.</description></item><item><title>Object Detection from 9 FPS to 650 FPS in 6 Steps</title><link>https://paulbridger.com/posts/video-analytics-pipeline-tuning/</link><pubDate>Wed, 30 Sep 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/video-analytics-pipeline-tuning/</guid><description>Making code run fast on GPUs requires a very different approach to making code run fast on CPUs because the hardware architecture is fundamentally different. Machine learning engineers of all kinds should care about squeezing performance from their models and hardware â€” not just for production purposes, but also for research and training. In research as in development, a fast iteration loop leads to faster improvement. This article is a practical deep dive into making a specific deep learning model (&lt;a href="https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/">Nvidia&amp;rsquo;s SSD300&lt;/a>) run fast on a powerful GPU server, but the general principles apply to all GPU programming.</description></item><item><title>Object Detection at 1840 FPS with TorchScript, TensorRT and DeepStream</title><link>https://paulbridger.com/posts/video-analytics-deepstream-pipeline/</link><pubDate>Sat, 17 Oct 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/video-analytics-deepstream-pipeline/</guid><description>In this article we take performance of the SSD300 model even further, leaving Python behind and moving towards true production deployment technologies: TorchScript, TensorRT and DeepStream. We also identify and understand several limitations in Nvidia&amp;rsquo;s DeepStream framework, and then remove them by modifying how the &lt;code>nvinfer&lt;/code> element works.</description></item><item><title>Object Detection at 2530 FPS with TensorRT and 8-Bit Quantization</title><link>https://paulbridger.com/posts/tensorrt-object-detection-quantized/</link><pubDate>Thu, 31 Dec 2020 08:43:23 +0200</pubDate><guid>https://paulbridger.com/posts/tensorrt-object-detection-quantized/</guid><description>This article is a deep dive into the techniques needed to get SSD300 object detection throughput to 2530 FPS. We will rewrite Pytorch model code, perform &lt;a href="https://github.com/NVIDIA/TensorRT/tree/master/tools/onnx-graphsurgeon">ONNX graph surgery&lt;/a>, optimize &lt;a href="https://github.com/NVIDIA/TensorRT/tree/master/plugin/batchedNMSPlugin">a TensorRT plugin&lt;/a> and finally we&amp;rsquo;ll quantize the model to an 8-bit representation. We will also examine divergence from the accuracy of the full-precision model.</description></item></channel></rss>